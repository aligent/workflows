name: ðŸ¤– Gadget Deployment

on:
  workflow_call:
    inputs:
      app-name:
        description: "Gadget App name to deploy too (required)"
        type: string
        required: true
      staging-environment-name: 
        description: "Main development environment of Gadget App to push code"
        type: string
      test-environment-name:
        description: "Main test environement of Gadget App to test code in"
        type: string
        required: false
      push-arguments:
        description: "Arguments (flags) to pass to ggt push CLI command"
        type: string
        required: false
      deploy-arguments:
        description: "Arguments (flags) to pass to ggt deploy CLI command"
        type: string
        required: false
    
    secrets:
      gadget-api-token:
        description: "Gadget API token"
        required: true


jobs:
  push-staging: # Push changes from git to a "staging" environment
    runs-on: ubuntu-latest
    if: inputs.staging-environment-name != ''
    steps:
      - uses: actions/checkout@v4

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version
        shell: bash

      - name: Push code to Gadget's Staging Environment
        run: |
          ggt push --app=${{ inputs.app-name }} --env=${{ inputs.staging-environment-name }} --force --allow-unknown-directory 
        shell: bash
        env:
          GGT_TOKEN: ${{ secrets.gadget-api-token }}

  push-test: # Push changes from git to a "pipeline" environment for testing
    runs-on: ubuntu-latest
    if: inputs.test-environment-name != ''
    steps:
      - uses: actions/checkout@v4

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version
        shell: bash

      - name: Push code to Gadget's Staging Environment
        run: |
          ggt push --app=${{ inputs.app-name }} --env=${{ inputs.test-environment-name }} --force --allow-unknown-directory 
        shell: bash
        env:
          GGT_TOKEN: ${{ secrets.gadget-api-token }}

  test:
    runs-on: ubuntu-latest
    needs: push-test
    if: needs.push-test.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Create env file # a .env file is required for an API key (stored as a secret)
        run: |
          touch .env
          echo GADGET_TOKEN="${{ secrets.gadget-api-token }}" >> .env
          echo GADGET_ENV="${{ inputs.test-environment-name }}" >> .env

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version

      - name: Pull client files into env # pull .gadget folder into test runner
        run: |
          ggt pull --app=${{ inputs.app-name }} --env=${{ inputs.test-environment-name }} --force --allow-unknown-directory

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run tests
        run: yarn test

  deploy: # Deploy Gadget Staging Environment to Production
    runs-on: ubuntu-latest
    needs: [push-staging, push-test, test]
    if: needs.push-staging.result == 'success' && needs.test.result == 'success' && github.ref_name == 'production'
    steps:
      - uses: actions/checkout@v4

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version
        shell: bash

      - name: Deploy to Gadget's Production Environment from Staging # Run ggt deploy to deploy changes from Gadget's Staging environment to Production
        run: |
          ggt deploy --app=${{ inputs.app-name }} --env=${{ inputs.staging-environment-name }} --force --allow-unknown-directory --allow-problems
        shell: bash
        env:
          GGT_TOKEN: ${{ secrets.gadget-api-token }}