
name: ðŸ¤– Gadget Push
on:
  workflow_call:
    inputs:
      app-name:
        description: "Gadget App name to deploy too (required)"
        type: string
        required: true
      deploy:
        description: "Boolean to check if deploy to production"
        type: boolean
        required: true
      staging-environment-name: 
        description: "Main development environment of Gadget App to push code"
        type: string
        default: "staging"
      test-environment-name:
        description: "Main test environement of Gadget App to test code in"
        type: string
        required: false
    
    secrets:
      gadget-api-token:
        description: "Gadget API token"
        required: true


jobs:
  push:
    name: ðŸ«¸ Push to Gadget
    runs-on: ubuntu-latest
    env:
      GGT_TOKEN: ${{ secrets.gadget-api-token }}
    outputs:
        push-test-status: ${{ steps.push-test.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version

      - name: Push code to Staging environment in Gadget
        id: push-staging
        run: |
          ggt push --app=${{ inputs.app-name }} --env=${{ inputs.staging-environment-name }} --force --allow-unknown-directory 

      - name: Push code to Testing environment in Gadget
        id: push-test
        run: |
          if [ ${{ inputs.test-environment-name }} ]; then
            ggt push --app=${{ inputs.app-name }} --env=${{ inputs.test-environment-name }} --force --allow-unknown-directory 
          fi

  test:
    name: ðŸ§ª Test from Gadget
    runs-on: ubuntu-latest
    env:
      GGT_TOKEN: ${{ secrets.gadget-api-token }}
    needs: push
    if: needs.push.outputs.push-test-status == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Install ggt
        run: |
          npm install -g ggt
          ggt version

      - name: Pull client files into env # pull .gadget folder into test runner
        run: |
          ggt pull --app=${{ inputs.app-name }} --env=${{ inputs.test-environment-name }} --force --allow-unknown-directory

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run tests
        run: yarn test

  deploy:
    name: ðŸš€ Deploying Gadget
    runs-on: ubuntu-latest
    env:
      GGT_TOKEN: ${{ secrets.gadget-api-token }}
    if: inputs.deploy == true
    steps:
      - uses: actions/checkout@v4

      - name: Deploy (promote) to Production environment in Gadget
        run: |
          ggt deploy --app=${{ inputs.app-name }} --env=${{ inputs.staging-environment-name }} --force --allow-unknown-directory --allow-problems