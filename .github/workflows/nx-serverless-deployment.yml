name: 🚀 Deploy

on:
  workflow_call:
    inputs:
      aws-region:
        description: "AWS region"
        type: string
        required: false
        default: "ap-southeast-2"
      stage:
        description: "Stage to deploy to"
        type: string
        required: true
      environment:
        description: "The GitHub environment to run the workflow in"
        type: string
        required: true
      command:
        description: "Command to run"
        type: string
        required: false
        default: "deploy"
      package-manager:
        description: "Node package manager to use"
        type: string
        required: false
        default: "yarn"
      is-yarn-classic:
        description: "If Yarn (pre-Berry) should be used"
        default: false
        type: boolean
      build-command:
        description: "Build command"
        type: string
        required: false
        default: "build"
      debug:
        description: "Debug mode - enable verbose logging"
        type: boolean
        required: false
        default: false
    secrets:
      aws-access-key-id:
        description: "AWS access key"
        required: true
      aws-secret-access-key:
        description: "AWS secret access key"
        required: true
      cfn-role:
        description: "The cfn role for the deploy user to assume"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package-manager }}

      - name: Install dependencies
        run: |
          debug=""
          if [ "${{ inputs.debug }}" = "true" ]; then
            debug="--verbose"
          fi

          lock_dependencies="--immutable"
          if [ "${{ inputs.is-yarn-classic }}" = "true" ]; then
            lock_dependencies="--frozen-lockfile"
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            debug=""
          fi

          if [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn config get nodeLinker
            yarn install $lock_dependencies $debug
          else
            npm ci $debug
          fi

      - name: 🚧 Configure Serverless
        run: |
          verbose=""
          if [ "$DEBUG" = "true" ]; then
            verbose="--verbose"
          fi

          npx serverless config credentials \
            --provider aws \
            --key "$AWS_ACCESS_KEY_ID" \
            --secret "$AWS_SECRET_ACCESS_KEY" \
            $verbose
            
          curl -L https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64 > /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

          # Insert the cfnRole value into all serverless files
          find services/*/ -name serverless.yml -exec sh -c 'yq -i ".provider.cfnRole = \"${0}\"" "$1"' "$CFN_ROLE" {} \;
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_REGION: ${{ inputs.aws-region }}
          CFN_ROLE: ${{ secrets.cfn-role }}
          DEBUG: ${{ inputs.debug }}

      - name: 🔍 Check repository type
        id: repo-type
        run: |
          echo "Checking repository type..."
          if [ -f "nx.json" ]; then
            echo "is_monorepo=true" >> $GITHUB_OUTPUT
            echo "Repository is a monorepo (nx.json found)"
          else
            echo "is_monorepo=false" >> $GITHUB_OUTPUT
            echo "Repository is not a monorepo (nx.json not found)"
          fi

      - name: 🚀 Deploy
        run: |
          if [ -z "${STAGE}" ]; then
            STAGE=${{ vars.STAGE }} # Fall back to stage var
          fi

          echo "Deploying to ${STAGE}"

          verbose=""
          if [ "$DEBUG" = "true" ]; then
            verbose="--verbose"
          fi

          if [ "${{ steps.repo-type.outputs.is_monorepo }}" = "true" ]; then
            echo "Deploying monorepo..."
            npx nx run-many -t "$COMMAND" --stage "$STAGE" $verbose
          else
            npx serverless "$COMMAND" --stage "$STAGE" $verbose
          fi
        env:
          COMMAND: ${{ inputs.command }}
          STAGE: ${{ inputs.stage }}
          DEBUG: ${{ inputs.debug }}
