name: üêò PHP Quality Checks

on:
  workflow_call:
    inputs:
      # PHP Configuration
      php-version:
        description: "PHP version to use (8.1, 8.2, 8.3)"
        type: string
        required: true
      
      # PHPStan Configuration
      phpstan-level:
        description: "PHPStan analysis level (1-9)"
        type: string
        required: false
        default: "6"
      skip-phpstan:
        description: "Skip PHPStan static analysis"
        type: boolean
        required: false
        default: false
      
      # PHP CodeSniffer Configuration
      coding-standard:
        description: "Coding standard to use (Magento2, PSR12, PSR2)"
        type: string
        required: false
        default: "Magento2"
      skip-phpcs:
        description: "Skip PHP CodeSniffer checks"
        type: boolean
        required: false
        default: false
      
      # Testing Configuration
      coverage-threshold:
        description: "Code coverage threshold percentage (0-100)"
        type: string
        required: false
        default: "80"
      skip-tests:
        description: "Skip PHP unit testing"
        type: boolean
        required: false
        default: false
      
      # Composer Configuration
      composer-args:
        description: "Additional composer install arguments"
        type: string
        required: false
        default: ""
      skip-security-audit:
        description: "Skip Composer security audit"
        type: boolean
        required: false
        default: false
      
      # System Configuration
      memory-limit:
        description: "PHP memory limit for analysis tools"
        type: string
        required: false
        default: "512M"
      
      # Debug Configuration
      debug:
        description: "Enable verbose logging and debug output"
        type: boolean
        required: false
        default: false

jobs:
  # Validate configuration and detect available tools
  prepare:
    name: üîç Prepare PHP Analysis
    runs-on: ubuntu-latest
    outputs:
      has-composer: ${{ steps.check-files.outputs.has-composer }}
      has-phpunit: ${{ steps.check-tools.outputs.has-phpunit }}
      has-phpstan-config: ${{ steps.check-tools.outputs.has-phpstan-config }}
      has-phpcs-config: ${{ steps.check-tools.outputs.has-phpcs-config }}
      has-phpmd-config: ${{ steps.check-tools.outputs.has-phpmd-config }}
      php-container: ${{ steps.php-config.outputs.container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for required files
        id: check-files
        run: |
          if [ -f "composer.json" ]; then
            echo "‚úÖ composer.json found"
            echo "has-composer=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå composer.json not found"
            echo "has-composer=false" >> $GITHUB_OUTPUT
          fi


      - name: Set PHP container configuration
        id: php-config
        run: |
          container="php:${{ inputs.php-version }}-cli-alpine"
          echo "üêò Verifying PHP container exists: $container"
          docker manifest inspect "$container" > /dev/null
          echo "container=$container" >> $GITHUB_OUTPUT
          echo "‚úÖ PHP container verified: $container"

      - name: Check for analysis tool configurations
        id: check-tools
        run: |
          # Check for PHPUnit
          if [ -f "phpunit.xml" ] || [ -f "phpunit.xml.dist" ] || [ -f "phpunit.dist.xml" ]; then
            echo "‚úÖ PHPUnit configuration found"
            echo "has-phpunit=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No PHPUnit configuration found"
            echo "has-phpunit=false" >> $GITHUB_OUTPUT
          fi

          # Check for PHPStan
          if [ -f "phpstan.neon" ] || [ -f "phpstan.neon.dist" ] || [ -f "phpstan.dist.neon" ]; then
            echo "‚úÖ PHPStan configuration found"
            echo "has-phpstan-config=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No PHPStan configuration found, will use defaults"
            echo "has-phpstan-config=false" >> $GITHUB_OUTPUT
          fi

          # Check for PHPCS
          if [ -f "phpcs.xml" ] || [ -f "phpcs.xml.dist" ] || [ -f "phpcs.dist.xml" ] || [ -f ".phpcs.xml" ]; then
            echo "‚úÖ PHPCS configuration found"
            echo "has-phpcs-config=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No PHPCS configuration found, will use standard"
            echo "has-phpcs-config=false" >> $GITHUB_OUTPUT
          fi

          # Check for PHPMD
          if [ -f "phpmd.xml" ] || [ -f "phpmd.xml.dist" ] || [ -f "phpmd.dist.xml" ]; then
            echo "‚úÖ PHPMD configuration found"
            echo "has-phpmd-config=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No PHPMD configuration found, will use defaults"
            echo "has-phpmd-config=false" >> $GITHUB_OUTPUT
          fi

  # Install Composer dependencies with caching
  install:
    name: üì¶ Install Dependencies
    needs: prepare
    if: needs.prepare.outputs.has-composer == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-php${{ inputs.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-php${{ inputs.php-version }}-
            ${{ runner.os }}-composer-

      - name: Install system dependencies
        run: |
          apk add --no-cache git unzip

      - name: Cache Composer binary
        id: composer-binary-cache
        uses: actions/cache@v4
        with:
          path: /tmp/composer.phar
          key: composer-binary-${{ runner.os }}

      - name: Install Composer
        if: steps.composer-binary-cache.outputs.cache-hit != 'true'
        run: |
          curl -sS https://getcomposer.org/installer | php -- --install-dir=/tmp --filename=composer.phar

      - name: Setup Composer
        run: |
          cp /tmp/composer.phar /usr/local/bin/composer
          chmod +x /usr/local/bin/composer
          composer --version

      # Archive Composer binary for other jobs
      - name: Upload Composer binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: composer-binary
          path: /tmp/composer.phar
          retention-days: 1

      - name: Validate composer.json and composer.lock
        run: |
          composer validate --strict ${{ inputs.debug && '--verbose' || '' }}

      - name: Install dependencies
        run: |
          php -ini | grep memory_limit
          php -d memory_limit=${{ inputs.memory-limit }} /usr/local/bin/composer install \
            --no-progress \
            --no-suggest \
            --no-interaction \
            --optimize-autoloader \
            --classmap-authoritative \
            ${{ inputs.composer-args }} \
            ${{ inputs.debug && '--verbose' || '' }}

      # Archive vendor directory for other jobs
      - name: Archive vendor directory
        run: tar -czf vendor.tar.gz vendor/

      - uses: actions/upload-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}
          path: vendor.tar.gz
          retention-days: 1

  # Composer security audit
  security-audit:
    name: üîí Security Audit
    needs: [prepare, install]
    if: needs.prepare.outputs.has-composer == 'true' && inputs.skip-security-audit == false
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          apk add --no-cache git unzip

      - name: Download Composer binary
        uses: actions/download-artifact@v4
        with:
          name: composer-binary
          path: /tmp

      - name: Setup Composer
        run: |
          cp /tmp/composer.phar /usr/local/bin/composer
          chmod +x /usr/local/bin/composer
          composer --version

      - uses: actions/download-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}

      - name: Extract vendor directory
        run: tar -xzf vendor.tar.gz

      - name: Run Composer security audit
        run: |
          echo "üîí Running Composer security audit..."
          composer audit --format=table ${{ inputs.debug && '--verbose' || '' }}

  # PHPStan static analysis
  phpstan:
    name: üîç PHPStan Analysis
    needs: [prepare, install]
    if: |
      inputs.skip-phpstan == false && 
      needs.prepare.outputs.has-composer == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: apk add --no-cache git

      - uses: actions/download-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}

      - name: Extract vendor directory
        run: tar -xzf vendor.tar.gz

      - name: Cache PHPStan results
        uses: actions/cache@v4
        with:
          path: /tmp/phpstan
          key: phpstan-php${{ inputs.php-version }}-${{ inputs.phpstan-level }}-${{ hashFiles('**/*.php') }}
          restore-keys: |
            phpstan-php${{ inputs.php-version }}-${{ inputs.phpstan-level }}-
            phpstan-php${{ inputs.php-version }}-

      - name: Run PHPStan analysis
        run: |
          echo "üîç Running PHPStan analysis (Level ${{ inputs.phpstan-level }})..."
          
          # Check for custom phpstan script first
          if composer run-script --list | grep -q "phpstan"; then
            echo "‚úÖ Using composer phpstan script"
            composer run-script phpstan
          elif [ -f "phpstan.sh" ]; then
            echo "‚úÖ Using phpstan.sh script"
            chmod +x phpstan.sh
            ./phpstan.sh
          elif [ -f "vendor/bin/phpstan" ]; then
            echo "‚úÖ Using vendor PHPStan"
            phpstan_cmd="vendor/bin/phpstan"
            
            # Build PHPStan command
            cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpstan_cmd analyse"
            
            # Use existing config or set defaults
            if [ "${{ needs.prepare.outputs.has-phpstan-config }}" = "true" ]; then
              echo "‚úÖ Using existing PHPStan configuration"
            else
              echo "‚ÑπÔ∏è Using default PHPStan configuration"
              cmd="$cmd --level=${{ inputs.phpstan-level }} src/ app/"
            fi

            # Add debug flags if enabled
            if [ "${{ inputs.debug }}" = "true" ]; then
              cmd="$cmd --verbose --debug"
            fi

            # Execute PHPStan
            eval $cmd
          else
            echo "Installing PHPStan globally..."
            composer global require phpstan/phpstan:^1.0
            phpstan_cmd="phpstan"
            
            # Build PHPStan command
            cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpstan_cmd analyse"
            cmd="$cmd --level=${{ inputs.phpstan-level }} src/ app/"

            # Add debug flags if enabled
            if [ "${{ inputs.debug }}" = "true" ]; then
              cmd="$cmd --verbose --debug"
            fi

            # Execute PHPStan
            eval $cmd
          fi

  # PHP CodeSniffer style checks
  phpcs:
    name: üé® Code Style Check
    needs: [prepare, install]
    if: |
      inputs.skip-phpcs == false && 
      needs.prepare.outputs.has-composer == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: apk add --no-cache git

      - uses: actions/download-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}

      - name: Extract vendor directory
        run: tar -xzf vendor.tar.gz

      - name: Run PHP CodeSniffer
        run: |
          echo "üé® Running PHP CodeSniffer (${{ inputs.coding-standard }} standard)..."
          
          # Check for custom check-style script first
          if composer run-script --list | grep -q "check-style"; then
            echo "‚úÖ Using composer check-style script"
            composer run-script check-style
          elif [ "${{ needs.prepare.outputs.has-phpcs-config }}" = "true" ]; then
            echo "‚úÖ Using existing PHPCS configuration"
            if [ -f "vendor/bin/phpcs" ]; then
              phpcs_cmd="vendor/bin/phpcs"
            else
              echo "Installing PHP CodeSniffer globally..."
              composer global require squizlabs/php_codesniffer:^3.0
              phpcs_cmd="phpcs"
            fi
            
            cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpcs_cmd --report=full --colors"
            if [ "${{ inputs.debug }}" = "true" ]; then
              cmd="$cmd --verbose"
            fi
            eval $cmd
          elif [ -f "vendor/bin/phpcs" ]; then
            echo "‚úÖ Using vendor PHPCS with ${{ inputs.coding-standard }} standard"
            phpcs_cmd="vendor/bin/phpcs"
            
            # Build PHPCS command
            cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpcs_cmd"
            cmd="$cmd --standard=${{ inputs.coding-standard }} src/ app/"
            cmd="$cmd --report=full --colors"
            
            if [ "${{ inputs.debug }}" = "true" ]; then
              cmd="$cmd --verbose"
            fi
            
            eval $cmd
          else
            echo "Installing PHP CodeSniffer globally..."
            composer global require squizlabs/php_codesniffer:^3.0
            phpcs_cmd="phpcs"
            
            # Install Magento2 standard if needed
            if [ "${{ inputs.coding-standard }}" = "Magento2" ]; then
              composer global require magento/magento-coding-standard:*
            fi
            
            # Build PHPCS command
            cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpcs_cmd"
            cmd="$cmd --standard=${{ inputs.coding-standard }} src/ app/"
            cmd="$cmd --report=full --colors"
            
            if [ "${{ inputs.debug }}" = "true" ]; then
              cmd="$cmd --verbose"
            fi
            
            eval $cmd
          fi

  # PHPMD mess detection
  phpmd:
    name: üßπ Mess Detection
    needs: [prepare, install]
    if: needs.prepare.outputs.has-composer == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: apk add --no-cache git

      - uses: actions/download-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}

      - name: Extract vendor directory
        run: tar -xzf vendor.tar.gz

      - name: Run PHP Mess Detector
        run: |
          echo "üßπ Running PHP Mess Detector..."
          
          # Check if PHPMD is installed
          if [ -f "vendor/bin/phpmd" ]; then
            phpmd_cmd="vendor/bin/phpmd"
          else
            echo "Installing PHPMD globally..."
            composer global require phpmd/phpmd:^2.0
            phpmd_cmd="phpmd"
          fi

          # Build PHPMD command
          cmd="php -d memory_limit=${{ inputs.memory-limit }} $phpmd_cmd"
          
          # Use existing config or set defaults
          if [ "${{ needs.prepare.outputs.has-phpmd-config }}" = "true" ]; then
            echo "‚úÖ Using existing PHPMD configuration"
            cmd="$cmd src/,app/ text phpmd.xml"
          else
            echo "‚ÑπÔ∏è Using default PHPMD rules"
            cmd="$cmd src/,app/ text cleancode,codesize,controversial,design,naming,unusedcode"
          fi

          # Add debug flags if enabled
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd="$cmd --verbose"
          fi

          # Execute PHPMD (allow to fail as it's often too strict)
          eval $cmd || echo "‚ö†Ô∏è PHPMD detected potential issues (non-blocking)"

  # PHPUnit testing with coverage
  test:
    name: üß™ Unit Tests
    needs: [prepare, install]
    if: |
      inputs.skip-tests == false && 
      needs.prepare.outputs.has-composer == 'true' &&
      needs.prepare.outputs.has-phpunit == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.prepare.outputs.php-container }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          apk add --no-cache git
          
          # Install Xdebug for coverage
          apk add --no-cache $PHPIZE_DEPS
          pecl install xdebug
          docker-php-ext-enable xdebug

      - uses: actions/download-artifact@v4
        with:
          name: vendor-php${{ inputs.php-version }}

      - name: Extract vendor directory
        run: tar -xzf vendor.tar.gz

      - name: Run PHPUnit tests
        run: |
          echo "üß™ Running PHPUnit tests with coverage..."
          
          # Check if PHPUnit is installed
          if [ -f "vendor/bin/phpunit" ]; then
            phpunit_cmd="vendor/bin/phpunit"
          else
            echo "‚ùå PHPUnit not found in vendor/bin/"
            exit 1
          fi

          # Build PHPUnit command with coverage
          cmd="php -d memory_limit=${{ inputs.memory-limit }} -d xdebug.mode=coverage $phpunit_cmd"
          cmd="$cmd --coverage-text --coverage-clover=coverage.xml"
          
          # Add debug flags if enabled
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd="$cmd --verbose"
          fi

          # Execute PHPUnit
          eval $cmd

      - name: Check coverage threshold
        run: |
          threshold=${{ inputs.coverage-threshold }}
          if [ -f "coverage.xml" ] && [ "$threshold" != "0" ]; then
            echo "üìä Checking coverage threshold ($threshold%)..."
            
            # Extract coverage percentage from clover XML
            coverage=$(php -r "
              \$xml = simplexml_load_file('coverage.xml');
              \$metrics = \$xml->project->metrics;
              \$covered = (float)\$metrics['coveredstatements'];
              \$total = (float)\$metrics['statements'];
              \$percentage = \$total > 0 ? (\$covered / \$total) * 100 : 0;
              echo round(\$percentage, 2);
            ")
            
            echo "üìä Current coverage: $coverage%"
            
            # Compare with threshold
            if (( $(echo "$coverage < $threshold" | bc -l) )); then
              echo "‚ùå Coverage $coverage% is below threshold $threshold%"
              exit 1
            else
              echo "‚úÖ Coverage $coverage% meets threshold $threshold%"
            fi
          else
            echo "‚ÑπÔ∏è Skipping coverage threshold check"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-php${{ inputs.php-version }}
          path: coverage.xml
          retention-days: 7


  # Cleanup artifacts
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [install, security-audit, phpstan, phpcs, phpmd, test]
    if: always()
    permissions:
      actions: write
    steps:
      - name: Delete temporary artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: process.env.GITHUB_RUN_ID,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('vendor-php')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                core.info(`üóëÔ∏è Deleted artifact '${artifact.name}'`);
              }
            }