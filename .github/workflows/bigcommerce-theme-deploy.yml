name: üõçÔ∏è BigCommerce Theme Deploy

# BigCommerce Stencil theme deployment workflow
# Supports theme bundling, validation, environment promotion, and rollback capabilities
# Includes asset optimization, configuration backup, and multi-environment deployment
on:
  workflow_call:
    inputs:
      # Core Configuration
      store-hash:
        description: "BigCommerce store hash (required)"
        type: string
        required: true
      environment:
        description: "Target environment (staging/production)"
        type: string
        required: false
        default: "staging"
      theme-name:
        description: "Theme name for identification (required)"
        type: string
        required: true
      
      # Deployment Control
      activate-theme:
        description: "Activate theme after deployment"
        type: boolean
        required: false
        default: true
      bundle-optimization:
        description: "Enable theme bundle optimization"
        type: boolean
        required: false
        default: true
      backup-current:
        description: "Backup current theme before deployment"
        type: boolean
        required: false
        default: true
      
      # Technical Configuration  
      node-version:
        description: "Node.js version for Stencil CLI"
        type: string
        required: false
        default: "18"
      stencil-version:
        description: "Stencil CLI version (optional, for pinning)"
        type: string
        required: false
      theme-config:
        description: "Theme configuration as JSON (optional)"
        type: string
        required: false
      
      # Advanced Options
      variation-name:
        description: "Theme variation to activate (optional)"
        type: string
        required: false
      channel-ids:
        description: "Channel IDs to apply theme (comma-separated, optional)"
        type: string
        required: false
      apply-to-all-channels:
        description: "Apply theme to all channels"
        type: boolean
        required: false
        default: false
      delete-oldest:
        description: "Delete oldest theme to make room"
        type: boolean
        required: false
        default: false
      debug:
        description: "Enable verbose logging and debug output"
        type: boolean
        required: false
        default: false

    secrets:
      bigcommerce-access-token:
        description: "BigCommerce API access token"
        required: true
      bigcommerce-client-id:
        description: "BigCommerce API client ID"
        required: true
      bigcommerce-client-secret:
        description: "BigCommerce API client secret"
        required: true

    outputs:
      theme-uuid:
        description: "Deployed theme UUID"
        value: ${{ jobs.deploy.outputs.theme-uuid }}
      theme-version:
        description: "Deployed theme version"
        value: ${{ jobs.deploy.outputs.theme-version }}
      deployment-url:
        description: "Theme preview URL"
        value: ${{ jobs.deploy.outputs.deployment-url }}
      backup-created:
        description: "Whether backup was created"
        value: ${{ jobs.deploy.outputs.backup-created }}

jobs:
  validate-environment:
    name: üîç Validate Environment
    runs-on: ubuntu-latest
    outputs:
      store-url: ${{ steps.validate.outputs.store-url }}
      environment-validated: ${{ steps.validate.outputs.environment-validated }}
    steps:
      - name: Validate inputs
        id: validate
        run: |
          # Validate store hash format
          if [[ ! "${{ inputs.store-hash }}" =~ ^[a-z0-9]{10}$ ]]; then
            echo "‚ùå Invalid store hash format. Expected 10 character alphanumeric string."
            exit 1
          fi
          
          # Validate environment
          if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
            echo "‚ùå Invalid environment. Must be 'staging' or 'production'."
            exit 1
          fi
          
          # Set store URL
          store_url="https://${{ inputs.store-hash }}.mybigcommerce.com"
          echo "store-url=$store_url" >> $GITHUB_OUTPUT
          echo "environment-validated=true" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Environment validation passed"
          echo "üè™ Store URL: $store_url"
          echo "üéØ Environment: ${{ inputs.environment }}"

  setup-theme:
    name: üîß Setup Theme Environment
    runs-on: ubuntu-latest
    needs: validate-environment
    outputs:
      stencil-version: ${{ steps.setup.outputs.stencil-version }}
      package-manager: ${{ steps.setup.outputs.package-manager }}
    steps:
      - name: Checkout theme code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for theme versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Setup Stencil CLI
        id: setup
        run: |
          # Determine package manager
          if [ -f "yarn.lock" ]; then
            package_manager="yarn"
            echo "üì¶ Using Yarn package manager"
          else
            package_manager="npm"
            echo "üì¶ Using NPM package manager"
          fi
          
          # Install Stencil CLI
          if [ -n "${{ inputs.stencil-version }}" ]; then
            stencil_version="${{ inputs.stencil-version }}"
            npm install -g @bigcommerce/stencil-cli@$stencil_version
            echo "üîß Installed Stencil CLI version: $stencil_version"
          else
            npm install -g @bigcommerce/stencil-cli
            stencil_version=$(stencil --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            echo "üîß Installed latest Stencil CLI version: $stencil_version"
          fi
          
          # Verify installation
          stencil --version
          
          # Output variables
          echo "stencil-version=$stencil_version" >> $GITHUB_OUTPUT
          echo "package-manager=$package_manager" >> $GITHUB_OUTPUT

      - name: Install theme dependencies
        run: |
          if [ "${{ steps.setup.outputs.package-manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
          
          echo "‚úÖ Theme dependencies installed"

      - name: Cache theme setup
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            node_modules
          key: theme-${{ runner.os }}-node${{ inputs.node-version }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            theme-${{ runner.os }}-node${{ inputs.node-version }}-

  backup-current-theme:
    name: üíæ Backup Current Theme
    runs-on: ubuntu-latest
    needs: [validate-environment, setup-theme]
    if: inputs.backup-current == true
    outputs:
      backup-created: ${{ steps.backup.outputs.backup-created }}
      backup-theme-uuid: ${{ steps.backup.outputs.backup-theme-uuid }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Stencil CLI
        run: |
          if [ -n "${{ inputs.stencil-version }}" ]; then
            npm install -g @bigcommerce/stencil-cli@${{ inputs.stencil-version }}
          else
            npm install -g @bigcommerce/stencil-cli
          fi

      - name: Configure Stencil
        run: |
          # Create Stencil configuration
          cat > .stencil << EOF
          {
            "normalStoreUrl": "${{ needs.validate-environment.outputs.store-url }}",
            "accessToken": "${{ secrets.bigcommerce-access-token }}",
            "port": 3000
          }
          EOF
          
          echo "üîß Stencil configuration created"

      - name: Backup current theme
        id: backup
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          backup_name="backup_${{ inputs.theme-name }}_${timestamp}"
          
          echo "üíæ Creating backup: $backup_name"
          
          # Pull current theme configuration
          if stencil pull; then
            echo "‚úÖ Current theme configuration pulled successfully"
            
            # Store backup information
            echo "backup-created=true" >> $GITHUB_OUTPUT
            echo "backup-theme-uuid=$backup_name" >> $GITHUB_OUTPUT
            
            echo "üíæ Backup created successfully: $backup_name"
          else
            echo "‚ö†Ô∏è Could not pull current theme configuration - continuing without backup"
            echo "backup-created=false" >> $GITHUB_OUTPUT
          fi

  validate-theme:
    name: ‚úÖ Validate Theme
    runs-on: ubuntu-latest
    needs: [setup-theme]
    steps:
      - name: Checkout theme code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Restore theme cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            node_modules
          key: theme-${{ runner.os }}-node${{ inputs.node-version }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: Install dependencies
        run: |
          if [ "${{ needs.setup-theme.outputs.package-manager }}" = "yarn" ]; then
            yarn install
          else
            npm ci
          fi

      - name: Validate theme structure
        run: |
          echo "üîç Validating theme structure..."
          
          # Check required files
          required_files=("config.json" "schema.json")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
            echo "‚úÖ Found required file: $file"
          done
          
          # Check required directories
          required_dirs=("templates" "assets")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            fi
            echo "‚úÖ Found required directory: $dir"
          done

      - name: Check file permissions
        run: |
          echo "üîç Checking file permissions..."
          
          # Find files with incorrect permissions
          incorrect_files=$(find . -type f ! -perm 644 -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null || true)
          incorrect_dirs=$(find . -type d ! -perm 755 -not -path "./.git" -not -path "./.git/*" -not -path "./node_modules" -not -path "./node_modules/*" 2>/dev/null || true)
          
          if [ -n "$incorrect_files" ] || [ -n "$incorrect_dirs" ]; then
            echo "‚ö†Ô∏è Found files/directories with incorrect permissions:"
            echo "$incorrect_files"
            echo "$incorrect_dirs"
            echo "üîß Fixing permissions..."
            
            # Fix permissions
            find . -type f -not -path "./.git/*" -not -path "./node_modules/*" -exec chmod 644 {} \; 2>/dev/null || true
            find . -type d -not -path "./.git" -not -path "./.git/*" -not -path "./node_modules" -not -path "./node_modules/*" -exec chmod 755 {} \; 2>/dev/null || true
            
            echo "‚úÖ File permissions fixed"
          else
            echo "‚úÖ All file permissions are correct"
          fi

      - name: Validate JSON files
        run: |
          echo "üîç Validating JSON configuration files..."
          
          json_files=("config.json" "schema.json")
          for file in "${json_files[@]}"; do
            if ! jq empty "$file" 2>/dev/null; then
              echo "‚ùå Invalid JSON in file: $file"
              exit 1
            fi
            echo "‚úÖ Valid JSON: $file"
          done

  optimize-theme:
    name: ‚ö° Optimize Theme
    runs-on: ubuntu-latest
    needs: [setup-theme, validate-theme]
    if: inputs.bundle-optimization == true
    steps:
      - name: Checkout theme code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Restore theme cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            node_modules
          key: theme-${{ runner.os }}-node${{ inputs.node-version }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      - name: Install dependencies
        run: |
          if [ "${{ needs.setup-theme.outputs.package-manager }}" = "yarn" ]; then
            yarn install
          else
            npm ci
          fi

      - name: Optimize assets
        run: |
          echo "‚ö° Optimizing theme assets..."
          
          # Run build process if available
          if [ "${{ needs.setup-theme.outputs.package-manager }}" = "yarn" ]; then
            if yarn run --list 2>/dev/null | grep -q "build"; then
              echo "üèóÔ∏è Running theme build process..."
              yarn run build
            fi
            if yarn run --list 2>/dev/null | grep -q "optimize"; then
              echo "‚ö° Running theme optimization..."
              yarn run optimize
            fi
          else
            if npm run build 2>/dev/null; then
              echo "üèóÔ∏è Theme build completed"
            fi
            if npm run optimize 2>/dev/null; then
              echo "‚ö° Theme optimization completed"
            fi
          fi
          
          echo "‚úÖ Asset optimization completed"

      - name: Upload optimized theme
        uses: actions/upload-artifact@v4
        with:
          name: optimized-theme
          path: |
            .
            !node_modules
            !.git
            !*.log
          retention-days: 1

  deploy:
    name: üöÄ Deploy Theme
    runs-on: ubuntu-latest
    needs: [validate-environment, setup-theme, backup-current-theme, validate-theme, optimize-theme]
    if: always() && (needs.validate-environment.result == 'success' && needs.setup-theme.result == 'success' && needs.validate-theme.result == 'success')
    outputs:
      theme-uuid: ${{ steps.deploy.outputs.theme-uuid }}
      theme-version: ${{ steps.deploy.outputs.theme-version }}
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      backup-created: ${{ needs.backup-current-theme.outputs.backup-created || 'false' }}
    steps:
      - name: Checkout theme code
        if: needs.optimize-theme.result != 'success'
        uses: actions/checkout@v4

      - name: Download optimized theme
        if: needs.optimize-theme.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: optimized-theme
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Stencil CLI
        run: |
          if [ -n "${{ inputs.stencil-version }}" ]; then
            npm install -g @bigcommerce/stencil-cli@${{ inputs.stencil-version }}
          else
            npm install -g @bigcommerce/stencil-cli
          fi
          
          echo "üîß Stencil CLI installed: $(stencil --version)"

      - name: Configure Stencil
        run: |
          # Create Stencil configuration
          cat > .stencil << EOF
          {
            "normalStoreUrl": "${{ needs.validate-environment.outputs.store-url }}",
            "accessToken": "${{ secrets.bigcommerce-access-token }}",
            "port": 3000
          }
          EOF
          
          # Apply custom theme configuration if provided
          if [ -n "${{ inputs.theme-config }}" ]; then
            echo "üîß Applying custom theme configuration..."
            echo '${{ inputs.theme-config }}' | jq . > custom-config.json
            
            # Merge with existing config.json
            if [ -f "config.json" ]; then
              jq -s '.[0] * .[1]' config.json custom-config.json > merged-config.json
              mv merged-config.json config.json
              echo "‚úÖ Custom configuration applied"
            fi
            
            rm -f custom-config.json
          fi
          
          echo "üîß Stencil configuration completed"

      - name: Bundle theme
        run: |
          echo "üì¶ Creating theme bundle..."
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            stencil bundle --debug
          else
            stencil bundle
          fi
          
          # Check bundle size
          bundle_file=$(find . -name "*.zip" -type f | head -1)
          if [ -n "$bundle_file" ]; then
            bundle_size=$(stat -c%s "$bundle_file")
            bundle_size_mb=$((bundle_size / 1024 / 1024))
            
            echo "üì¶ Bundle created: $bundle_file"
            echo "üìè Bundle size: ${bundle_size_mb}MB"
            
            if [ $bundle_size_mb -gt 50 ]; then
              echo "‚ùå Bundle size exceeds 50MB limit"
              exit 1
            fi
          else
            echo "‚ùå Bundle creation failed - no .zip file found"
            exit 1
          fi

      - name: Deploy theme to BigCommerce
        id: deploy
        run: |
          echo "üöÄ Deploying theme to BigCommerce..."
          
          # Build stencil push command
          push_cmd="stencil push"
          
          # Add activation flag
          if [ "${{ inputs.activate-theme }}" = "true" ]; then
            if [ -n "${{ inputs.variation-name }}" ]; then
              push_cmd="$push_cmd -a ${{ inputs.variation-name }}"
            else
              push_cmd="$push_cmd -a"
            fi
          fi
          
          # Add channel configuration
          if [ "${{ inputs.apply-to-all-channels }}" = "true" ]; then
            push_cmd="$push_cmd -allc"
          elif [ -n "${{ inputs.channel-ids }}" ]; then
            # Convert comma-separated to space-separated
            channel_list=$(echo "${{ inputs.channel-ids }}" | tr ',' ' ')
            push_cmd="$push_cmd -c $channel_list"
          fi
          
          # Add delete oldest flag
          if [ "${{ inputs.delete-oldest }}" = "true" ]; then
            push_cmd="$push_cmd -d"
          fi
          
          echo "üì§ Executing: $push_cmd"
          
          # Execute deployment with error handling
          if [ "${{ inputs.debug }}" = "true" ]; then
            set -x
          fi
          
          # Capture output for parsing
          output_file=$(mktemp)
          if eval "$push_cmd" > "$output_file" 2>&1; then
            echo "‚úÖ Theme deployment successful!"
            
            # Parse deployment output for theme information
            theme_uuid=$(grep -o 'Theme ID: [a-f0-9-]*' "$output_file" | cut -d' ' -f3 || echo "unknown")
            theme_version=$(date +%Y%m%d_%H%M%S)
            deployment_url="${{ needs.validate-environment.outputs.store-url }}"
            
            echo "üéØ Theme UUID: $theme_uuid"
            echo "üìã Theme Version: $theme_version"
            echo "üåê Deployment URL: $deployment_url"
            
            # Set outputs
            echo "theme-uuid=$theme_uuid" >> $GITHUB_OUTPUT
            echo "theme-version=$theme_version" >> $GITHUB_OUTPUT
            echo "deployment-url=$deployment_url" >> $GITHUB_OUTPUT
            
            cat "$output_file"
          else
            echo "‚ùå Theme deployment failed!"
            cat "$output_file"
            exit 1
          fi
          
          rm -f "$output_file"

  verify-deployment:
    name: üîç Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Verify theme deployment
        run: |
          echo "üîç Verifying theme deployment..."
          
          deployment_url="${{ needs.deploy.outputs.deployment-url }}"
          theme_uuid="${{ needs.deploy.outputs.theme-uuid }}"
          
          echo "üåê Store URL: $deployment_url"
          echo "üéØ Theme UUID: $theme_uuid"
          
          # Basic connectivity check
          if curl -sSf "$deployment_url" > /dev/null; then
            echo "‚úÖ Store is accessible"
          else
            echo "‚ö†Ô∏è Store accessibility check failed - this may be normal for private stores"
          fi
          
          echo "‚úÖ Deployment verification completed"

  report-deployment:
    name: üìä Deployment Report
    runs-on: ubuntu-latest
    needs: [deploy, verify-deployment]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "# üõçÔ∏è BigCommerce Theme Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Theme Name**: ${{ inputs.theme-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Store Hash**: ${{ inputs.store-hash }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Theme UUID**: ${{ needs.deploy.outputs.theme-uuid }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Theme Version**: ${{ needs.deploy.outputs.theme-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL**: ${{ needs.deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ inputs.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stencil Version**: ${{ needs.setup-theme.outputs.stencil-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Theme Activated**: ${{ inputs.activate-theme }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Optimized**: ${{ inputs.bundle-optimization }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup Created**: ${{ needs.deploy.outputs.backup-created }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "## ‚úÖ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "Theme has been successfully deployed to BigCommerce!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Theme deployment encountered issues. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi