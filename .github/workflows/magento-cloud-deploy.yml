name: üõçÔ∏è Magento Cloud Deployment

on:
  workflow_call:
    inputs:
      # Magento Cloud Configuration
      magento-cloud-project-id:
        description: "Magento Cloud project ID (required)"
        type: string
        required: true
      environment:
        description: "Target environment (integration/staging/production)"
        type: string
        required: false
        default: "integration"
      
      # Monitoring and Reporting
      newrelic-app-id:
        description: "NewRelic application ID for deployment markers (optional)"
        type: string
        required: false
        default: ""
      
      # CST Reporting Configuration
      cst-endpoint:
        description: "CST endpoint base URL (optional, overrides workspace variable)"
        type: string
        required: false
        default: ""
      cst-project-key:
        description: "CST project key (optional, overrides workspace variable)"
        type: string
        required: false
        default: ""
      
      # Advanced Configuration
      debug:
        description: "Enable verbose logging and debug output"
        type: boolean
        required: false
        default: false

    secrets:
      magento-cloud-cli-token:
        description: "Magento Cloud CLI token for authentication"
        required: true
      newrelic-api-key:
        description: "NewRelic API key for deployment markers (optional)"
        required: false
      cst-reporting-token:
        description: "CST system reporting token (optional)"
        required: false

    outputs:
      deployment-url:
        description: "URL of the deployed Magento application"
        value: ${{ jobs.deploy.outputs.deployment-url }}
      deployment-id:
        description: "Magento Cloud deployment ID"
        value: ${{ jobs.deploy.outputs.deployment-id }}

jobs:
  # Simple validation job
  validate:
    name: üîç Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.magento-cloud-project-id }}" ]; then
            echo "‚ùå Error: magento-cloud-project-id is required"
            exit 1
          fi
          
          if [ "${{ inputs.environment }}" != "integration" ] && [ "${{ inputs.environment }}" != "staging" ] && [ "${{ inputs.environment }}" != "production" ]; then
            echo "‚ùå Error: environment must be one of: integration, staging, production"
            exit 1
          fi

          echo "‚úÖ All required inputs validated"

  # Simple deploy to Magento Cloud
  deploy:
    name: üöÄ Deploy to Magento Cloud
    runs-on: ubuntu-latest
    needs: [validate, newrelic-start]
    if: always() && needs.validate.result == 'success'
    environment: ${{ inputs.environment }}
    outputs:
      deployment-url: ${{ steps.deploy-info.outputs.url }}
      deployment-id: ${{ steps.deploy-info.outputs.id }}
    steps:
      - name: Checkout code with full git history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history required for Magento Cloud

      - name: Install Magento Cloud CLI
        run: |
          echo "üì¶ Installing Magento Cloud CLI..."
          curl -fsS https://accounts.magento.cloud/cli/installer | php
          export PATH=$HOME/.magento-cloud/bin:$PATH
          echo "$HOME/.magento-cloud/bin" >> $GITHUB_PATH
          
          # Verify installation
          magento-cloud --version
          echo "‚úÖ Magento Cloud CLI installed successfully"

      - name: Configure Magento Cloud CLI authentication
        run: |
          echo "üîê Configuring Magento Cloud authentication..."
          magento-cloud auth:login --token "${{ secrets.magento-cloud-cli-token }}"
          echo "‚úÖ Authentication configured"


      - name: Deploy to Magento Cloud
        id: deployment
        run: |
          echo "üöÄ Starting deployment to ${{ inputs.environment }}..."
          
          debug=""
          if [ "${{ inputs.debug }}" = "true" ]; then
            debug="--verbose"
          fi
          
          # Set project context
          magento-cloud project:set-remote "${{ inputs.magento-cloud-project-id }}"
          
          # Deploy based on environment type
          case "${{ inputs.environment }}" in
            "integration")
              # Push to integration environment
              echo "Deploying to integration environment..."
              magento-cloud push --force --wait $debug
              ;;
            "staging"|"production")
              # Push to staging/production branch
              echo "Deploying to ${{ inputs.environment }} environment..."
              magento-cloud push --environment "${{ inputs.environment }}" --force --wait $debug
              ;;
          esac
          
          echo "‚úÖ Deployment completed successfully"

      - name: Get deployment information
        id: deploy-info
        run: |
          echo "üìã Retrieving deployment information..."
          
          # Get environment URL
          URL=$(magento-cloud url --environment "${{ inputs.environment }}" --project "${{ inputs.magento-cloud-project-id }}" --pipe)
          echo "url=${URL}" >> $GITHUB_OUTPUT
          
          # Get deployment ID
          DEPLOYMENT_ID=$(magento-cloud activity:list --environment "${{ inputs.environment }}" --type push --limit 1 --format csv --columns id --no-header | head -1)
          echo "id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            echo "üîç Deployment information:"
            echo "  URL: ${URL}"
            echo "  Deployment ID: ${DEPLOYMENT_ID}"
          fi

      - name: Generate deployment summary
        run: |
          echo "## üõçÔ∏è Magento Cloud Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Project ID** | ${{ inputs.magento-cloud-project-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment ID** | ${{ steps.deploy-info.outputs.id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Site URL** | [${{ steps.deploy-info.outputs.url }}](${{ steps.deploy-info.outputs.url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Git Commit** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployed By** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "${{ inputs.environment }}" in
            "production")
              echo "### üåç Production Deployment" >> $GITHUB_STEP_SUMMARY
              echo "Your Magento store is now live at:" >> $GITHUB_STEP_SUMMARY
              echo "**[${{ steps.deploy-info.outputs.url }}](${{ steps.deploy-info.outputs.url }})**" >> $GITHUB_STEP_SUMMARY
              ;;
            "staging")
              echo "### üöÄ Staging Environment" >> $GITHUB_STEP_SUMMARY
              echo "Staging environment updated successfully:" >> $GITHUB_STEP_SUMMARY
              echo "**[${{ steps.deploy-info.outputs.url }}](${{ steps.deploy-info.outputs.url }})**" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "### üîß Integration Environment" >> $GITHUB_STEP_SUMMARY
              echo "Integration environment deployed for testing:" >> $GITHUB_STEP_SUMMARY
              echo "**[${{ steps.deploy-info.outputs.url }}](${{ steps.deploy-info.outputs.url }})**" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # NewRelic Start Marker Job - runs before deployment
  newrelic-start:
    name: üìä NewRelic Start
    runs-on: ubuntu-latest
    needs: [validate]
    if: inputs.newrelic-app-id != ''
    steps:
      - name: Create NewRelic deployment marker (start)
        run: |
          if [ -z "${{ secrets.newrelic-api-key }}" ]; then
            echo "‚ö†Ô∏è NewRelic API key not provided, skipping deployment marker"
            exit 0
          fi
          
          echo "üìä Creating NewRelic deployment marker (start)..."
          
          curl -X POST "https://api.newrelic.com/v2/applications/${{ inputs.newrelic-app-id }}/deployments.json" \
            -H "X-Api-Key: ${{ secrets.newrelic-api-key }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "revision": "${{ github.sha }}",
                "changelog": "Magento Cloud deployment started",
                "description": "Deployment to ${{ inputs.environment }} environment",
                "user": "${{ github.actor }}"
              }
            }'
          
          echo "‚úÖ NewRelic deployment start marker created"

  # NewRelic Complete Marker Job - runs after deployment (success or failure)
  newrelic-complete:
    name: üìä NewRelic Complete
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && inputs.newrelic-app-id != ''
    steps:
      - name: Create NewRelic deployment marker (complete)
        run: |
          if [ -z "${{ secrets.newrelic-api-key }}" ]; then
            echo "‚ö†Ô∏è NewRelic API key not provided, skipping deployment marker"
            exit 0
          fi
          
          echo "üìä Creating NewRelic deployment marker (complete)..."
          
          # Determine deployment status and set appropriate message
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            CHANGELOG="Magento Cloud deployment completed successfully"
            DESCRIPTION="Deployment to ${{ inputs.environment }} completed at ${{ needs.deploy.outputs.deployment-url }}"
            echo "‚úÖ Deployment was successful"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            CHANGELOG="Magento Cloud deployment failed"
            DESCRIPTION="Deployment to ${{ inputs.environment }} failed - check workflow logs for details"
            echo "‚ùå Deployment failed"
          elif [ "${{ needs.deploy.result }}" == "cancelled" ]; then
            CHANGELOG="Magento Cloud deployment cancelled"
            DESCRIPTION="Deployment to ${{ inputs.environment }} was cancelled by user"
            echo "‚ö†Ô∏è Deployment was cancelled"
          else
            CHANGELOG="Magento Cloud deployment status: ${{ needs.deploy.result }}"
            DESCRIPTION="Deployment to ${{ inputs.environment }} ended with status: ${{ needs.deploy.result }}"
            echo "‚ÑπÔ∏è Deployment status: ${{ needs.deploy.result }}"
          fi
          
          curl -X POST "https://api.newrelic.com/v2/applications/${{ inputs.newrelic-app-id }}/deployments.json" \
            -H "X-Api-Key: ${{ secrets.newrelic-api-key }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"deployment\": {
                \"revision\": \"${{ github.sha }}\",
                \"changelog\": \"${CHANGELOG}\",
                \"description\": \"${DESCRIPTION}\",
                \"user\": \"${{ github.actor }}\"
              }
            }"
          
          echo "‚úÖ NewRelic deployment marker created with status: ${{ needs.deploy.result }}"

  # CST Reporting Job - runs in parallel with NewRelic complete after successful deployment
  cst-report:
    name: üì° Report to CST
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Report deployment to CST (Confidentiality and Security Team)
        run: |
          # Determine CST endpoint - input overrides workspace variable
          CST_ENDPOINT="${{ inputs.cst-endpoint }}"
          if [ -z "$CST_ENDPOINT" ]; then
            CST_ENDPOINT="${{ vars.CST_ENDPOINT }}"
          fi
          
          # Determine CST project key - input overrides workspace variable
          CST_PROJECT_KEY="${{ inputs.cst-project-key }}"
          if [ -z "$CST_PROJECT_KEY" ]; then
            CST_PROJECT_KEY="${{ vars.CST_PROJECT_KEY }}"
          fi
          
          # Determine CST reporting key - input overrides workspace secret
          CST_KEY="${{ secrets.cst-reporting-token }}"
          if [ -z "$CST_KEY" ]; then
            CST_KEY="${{ secrets.CST_REPORTING_TOKEN }}"
          fi
          
          # Check if we have all required CST configuration
          if [ -z "$CST_ENDPOINT" ] || [ -z "$CST_PROJECT_KEY" ] || [ -z "$CST_KEY" ]; then
            echo "‚ÑπÔ∏è CST reporting skipped (missing endpoint, project key, or auth key)"
            echo "  - Endpoint: $([ -n "$CST_ENDPOINT" ] && echo "‚úÖ configured" || echo "‚ùå missing")"
            echo "  - Project Key: $([ -n "$CST_PROJECT_KEY" ] && echo "‚úÖ configured" || echo "‚ùå missing")"
            echo "  - Auth Key: $([ -n "$CST_KEY" ] && echo "‚úÖ configured" || echo "‚ùå missing")"
            exit 0
          fi
          
          echo "üì° Reporting deployment to CST (Confidentiality and Security Team)..."
          
          # Construct full CST URL: endpoint/project_key/adobe-commerce
          CST_FULL_URL="${CST_ENDPOINT}/${CST_PROJECT_KEY}/adobe-commerce"
          
          # Send composer.lock file contents to CST endpoint
          if [ -f "composer.lock" ]; then
            curl -X POST "${CST_FULL_URL}" \
              -H "Authorization: Bearer ${CST_KEY}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @composer.lock
            
            echo "‚úÖ Deployment reported to CST systems at ${CST_FULL_URL}"
          else
            echo "‚ö†Ô∏è composer.lock not found, skipping CST reporting"
          fi
